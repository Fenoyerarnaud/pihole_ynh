#!/bin/bash

#=================================================
# GENERIC STARTING
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers
# Load common variables for all scripts.
source _variables

#=================================================
# MANAGE FAILURE OF THE SCRIPT
#=================================================

# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================
ynh_script_progression --message="Retrieve arguments from the manifest"

domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
admin=$YNH_APP_ARG_ADMIN
query_logging=$YNH_APP_ARG_QUERY_LOGGING
enable_dhcp=$YNH_APP_ARG_ENABLE_DHCP

app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THIS ARGS
#=================================================
ynh_script_progression --message="Check if the app can be installed"

final_path=/var/www/$app
test ! -e "$final_path" || ynh_die "This path already contains a folder"

# Normalize the url path syntax
path_url=$(ynh_normalize_url_path $path_url)

# Register (book) web path
ynh_webpath_register $app $domain $path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Store settings from manifest" --weight=3

ynh_app_setting_set $app domain $domain
ynh_app_setting_set $app path $path_url
ynh_app_setting_set $app admin $admin
ynh_app_setting_set $app query_logging $query_logging
ynh_app_setting_set $app enable_dhcp $enable_dhcp

ynh_app_setting_set $app overwrite_setupvars "1"
ynh_app_setting_set $app overwrite_ftl "1"
ynh_app_setting_set $app overwrite_nginx "1"
ynh_app_setting_set $app overwrite_phpfpm "1"
ynh_app_setting_set $app admin_mail_html "1"

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================
ynh_script_progression --message="Find and open a free port" --weight=12

# Find a free port
port=$(ynh_find_port 4711)
if [ $port -gt 4720 ]
then
	ynh_die "The ports 4711 to 4720 are already in use. Pi-hole can't works on another port. Please try to free one of this ports."
fi
# Open this port
ynh_exec_fully_quiet yunohost firewall allow --no-upnp TCP $port
ynh_app_setting_set $app port $port

# Disable the port 53 for upnp
ynh_exec_fully_quiet yunohost firewall disallow Both 53 --no-reload
ynh_exec_fully_quiet yunohost firewall allow Both 53 --no-upnp

#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Install dependencies" --weight=12

ynh_install_app_dependencies $app_depencencies

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Download, check and unpack source" --weight=4

ynh_app_setting_set $app final_path $final_path
# Make a copy of local pihole repository (for Gravity)
pihole_local_repo="/etc/.pihole"
ynh_setup_source "$pihole_local_repo"
# Install admin dashboard
ynh_setup_source "$final_path" admin_dashboard

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configure nginx" --weight=2

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Create a dedicated user" --weight=2

# Create a dedicated system user
ynh_system_user_create $app

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Configure php-fpm" --weight=2

# Create a dedicated php-fpm config
ynh_add_fpm_config

#=================================================
# SPECIFIC SETUP
#=================================================
# CREATE DIRECTORIES AND POPULATE THEM
#=================================================
ynh_script_progression --message="Create and populate directories"

pihole_storage="/etc/pihole"
mkdir -p "$pihole_storage"
chown $app: -R "$pihole_storage"

pihole_dir="/opt/pihole"
mkdir -p "$pihole_dir"

# Make a copy of Pi-Hole scripts
cp -a "$pihole_local_repo/gravity.sh" "$pihole_dir/"
cp -a $pihole_local_repo/advanced/Scripts/*.sh "$pihole_dir/"

# And copy this fucking COL_TABLE file...
cp -a "$pihole_local_repo/advanced/Scripts/COL_TABLE" "$pihole_dir/"

#=================================================
# COPY PI-HOLE MAIN SCRIPT
#=================================================
ynh_script_progression --message="Copy Pi-Hole main script"

cp -a "$pihole_local_repo/pihole" /usr/local/bin/
cp -a "$pihole_local_repo/advanced/bash-completion/pihole" /etc/bash_completion.d/pihole

#=================================================
# CREATE LOG FILES
#=================================================

touch /var/log/pihole.log
chmod 644 /var/log/pihole.log
dnsmasq_user=$(grep DNSMASQ_USER= /etc/init.d/dnsmasq | cut -d'"' -f2)
chown $dnsmasq_user:root /var/log/pihole.log

#=================================================
# CREATE SUDOER FILE
#=================================================

# This sudoers config allow pihole to execute /usr/local/bin/pihole as root without password. Nothing more.
cp "$pihole_local_repo/advanced/pihole.sudo" /etc/sudoers.d/pihole
echo "$app ALL=NOPASSWD: /usr/local/bin/pihole" >> /etc/sudoers.d/pihole
# echo "Defaults secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin" >> /etc/sudoers.d/pihole
chmod 0440 /etc/sudoers.d/pihole

#=================================================
# INSTALL LOGROTATE SCRIPT FOR PI-HOLE
#=================================================

cp "$pihole_local_repo/advanced/logrotate" "$pihole_storage/logrotate"
sed -i "/# su #/d;" "$pihole_storage/logrotate"

#=================================================
# INSTALLATION OF PIHOLE-FTL
#=================================================
ynh_script_progression --message="Install PiHole-FTL" --weight=30

# Get the source of Pi-Hole-FTL
FTL_temp_path=$(mktemp -d)
ynh_setup_source "$FTL_temp_path" FTL

# Instead of downloading a binary file, we're going to compile it
( cd "$FTL_temp_path"
ynh_exec_warn_less make
ynh_exec_warn_less make install )
ynh_secure_remove "$FTL_temp_path"

cp "../conf/pihole-FTL.conf" "$pihole_storage"
# Calculate and store the config file checksum into the app settings
ynh_store_file_checksum "$pihole_storage/pihole-FTL.conf"

cp -a $pihole_local_repo/advanced/pihole-FTL.service /etc/init.d/pihole-FTL
chmod +x /etc/init.d/pihole-FTL
ynh_exec_warn_less systemctl enable pihole-FTL

#=================================================
# BUILD VARIABLES FILE
#=================================================

setupVars="$pihole_storage/setupVars.conf"

# Get the default network interface
main_iface=$(ip route | grep --max-count=1 default | awk '{print $5;}')
echo "PIHOLE_INTERFACE=$main_iface" > $setupVars
echo "IPV4_ADDRESS=127.0.0.1" >> $setupVars
echo "IPV6_ADDRESS=" >> $setupVars
echo "PIHOLE_DNS_1=" >> $setupVars
echo "PIHOLE_DNS_2=" >> $setupVars
if [ $query_logging -eq 1 ]; then
	query_logging=true
else
	query_logging=false
fi
echo "QUERY_LOGGING=$query_logging" >> $setupVars
echo "INSTALL_WEB=true" >> $setupVars

# Calculate and store the config file checksum into the app settings
ynh_store_file_checksum "$setupVars"

#=================================================
# SET UP DNSMASQ CONFIG
#=================================================
ynh_script_progression --message="Set up Dnsmasq config" --weight=2

ynh_systemd_action --action=stop --service_name=dnsmasq

pihole_dnsmasq_config="/etc/dnsmasq.d/01-pihole.conf"
cp "$pihole_local_repo/advanced/01-pihole.conf" $pihole_dnsmasq_config
# Use dns from /etc/resolv.dnsmasq.conf
ynh_replace_string "@DNS1@" "" $pihole_dnsmasq_config
ynh_replace_string "@DNS2@" "" $pihole_dnsmasq_config
ynh_replace_string "^no-resolv" "#no-resolv" $pihole_dnsmasq_config

ynh_replace_string "@INT@" "$main_iface" $pihole_dnsmasq_config
if [ "$query_logging" = "true" ]; then
	ynh_replace_string "^#log-queries" "log-queries" $pihole_dnsmasq_config
else
	ynh_replace_string "^log-queries" "#log-queries" $pihole_dnsmasq_config
fi

# Fix a too recent option for our dnsmasq version.
ynh_replace_string "log-queries=extra" "log-queries" $pihole_dnsmasq_config

# Calculate and store the config file checksum into the app settings
ynh_store_file_checksum "$pihole_dnsmasq_config"

# To prevent any conflict with the original dnsmasq config, comment cache-size in the original config.
ynh_replace_string "^cache-size=" "#pihole# cache-size=" /etc/dnsmasq.conf

#=================================================
# CONFIGURE DNS FOR THE LOCAL DOMAINS
#=================================================
ynh_script_progression --message="Configure dns for the local domains" --weight=7

# Find the IP associated to the network interface
localipv4=$(ip address | grep "${main_iface}\$" | awk '{print $2;}' | cut -d/ -f1)

# List all YunoHost domains
while read perdomain
do
	# Comment domain resolution in /etc/hosts on 127.0.0.1, because they can interfere with the local network resolution.
	ynh_replace_string "^127.0.0.1.*$perdomain" "#Commented by pihole# &" /etc/hosts

	# And add a resolution on the local IP instead
	grep -q "^$localipv4.*$perdomain" /etc/hosts || \
		echo "$localipv4	$perdomain #Added by pihole#" >> /etc/hosts
done <<< "$(yunohost domain list | grep "\." | sed 's/.*: \|.*- //')"

#=================================================
# ENABLE DHCP SERVER
#=================================================

if [ $enable_dhcp -eq 1 ]
then
	ynh_script_progression --message="Enable dhcp server"
	max_dhcp_range=250
	dhcp_range=100
	# Define the dhcp range from the current ip
	ip_beginning_part=$(echo "$localipv4" | cut -d. -f1-3)
	ip_fourth_part=$(echo "$localipv4" | cut -d. -f4)
	b_range=$(( $ip_fourth_part + $dhcp_range ))
	if [ $b_range -gt $max_dhcp_range ]; then
		b_range=$max_dhcp_range
	fi
	a_range=$(( $b_range - $dhcp_range ))

	# Get the gateway
	gateway=$(ip route | grep default | awk '{print $3;}')
	# And the mac adress
	hw_adress=$(ip link | grep -A1 "$main_iface" | tail -n1 | awk '{print $2;}')

	# Copy the config file
	cp "../conf/02-pihole-dhcp.conf" "/etc/dnsmasq.d/"

	# And set the config
	ynh_replace_string "__A_RANGE__" "$ip_beginning_part.$a_range" "/etc/dnsmasq.d/02-pihole-dhcp.conf"
	ynh_replace_string "__B_RANGE__" "$ip_beginning_part.$b_range" "/etc/dnsmasq.d/02-pihole-dhcp.conf"
	ynh_replace_string "__GATEWAY__" "$gateway" "/etc/dnsmasq.d/02-pihole-dhcp.conf"

	# Set a static ip for the server.
	echo "dhcp-host=$hw_adress,$localipv4" > "/etc/dnsmasq.d/04-pihole-static-dhcp.conf"
fi

# Open the UDP port 67 for dhcp
ynh_exec_fully_quiet yunohost firewall allow UDP 67 --no-upnp

#=================================================
# RESTART DNSMASQ
#=================================================
ynh_script_progression --message="Restart Dnsmasq" --time --weight=2

ynh_systemd_action --action=restart --service_name=dnsmasq

#=================================================
# INSTALL CRON JOB
#=================================================

cp $pihole_local_repo/advanced/pihole.cron /etc/cron.d/pihole
# Remove git usage for version. Which fails because we use here a release instead of master.
ynh_replace_string ".*updatechecker.*" "#&" /etc/cron.d/pihole

#=================================================
# BUILD THE LISTS WITH GRAVITY
#=================================================
ynh_script_progression --message="Build the lists with Gravity" --weight=7

cp "$pihole_local_repo/adlists.default" "$pihole_storage/adlists.default"
ynh_exec_warn_less /opt/pihole/gravity.sh

#=================================================
# START PIHOLE-FTL
#=================================================
ynh_script_progression --message="Restart PiHole-FTL" --weight=2

ynh_systemd_action --action=restart --service_name=pihole-FTL

#=================================================
# SET UP CONF_REGEN HOOK
#=================================================

cp ../conf/dnsmasq_regenconf_hook /usr/share/yunohost/hooks/conf_regen/50-dnsmasq_$app

#=================================================
# GENERIC FINALISATION
#=================================================
# ADVERTISE SERVICE IN ADMIN PANEL
#=================================================

yunohost service add pihole-FTL --log "/var/log/pihole-FTL.log"

#=================================================
# RESTRAIN THE ACCESS TO THE ADMIN ONLY
#=================================================
ynh_script_progression --message="Restrain the access to the admin only" --weight=2

yunohost app addaccess --users=$admin $app

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reload nginx" --weight=4

ynh_systemd_action --action=reload --service_name=nginx

#=================================================
# SEND A README FOR THE ADMIN
#=================================================

# Get main domain and buid the url of the admin panel of the app.
admin_panel="https://$(grep portal_domain /etc/ssowat/conf.json | cut -d'"' -f4)/yunohost/admin/#/apps/$app"

if [ $enable_dhcp -eq 1 ]
then
	dhcp_alert="You asked to use the internal DHCP server of dnsmasq with PiHole.
You should really read the __URL_TAG1__documentation about that__URL_TAG2__https://github.com/YunoHost-Apps/pihole_ynh/blob/master/dhcp.md__URL_TAG3__

"
else
	dhcp_alert=""
fi

echo "${dhcp_alert}You can configure this app easily by using the experimental __URL_TAG1__config-panel feature__URL_TAG2__$admin_panel/config-panel__URL_TAG3__.
You can also find some specific actions for this app by using the experimental __URL_TAG1__action feature__URL_TAG2__$admin_panel/actions__URL_TAG3__.

If you're facing an issue or want to improve this app, please open a new issue in this __URL_TAG1__project__URL_TAG2__https://github.com/YunoHost-Apps/pihole_ynh__URL_TAG3__." > mail_to_send

ynh_send_readme_to_admin --app_message="mail_to_send" --recipients="$admin" --type="install"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation completed" --last
